{"version":3,"sources":["data/table.js","components/Method.jsx","components/HttpTable.jsx","data/methods.js","components/Developer.jsx","components/Navbar.jsx","components/Landing.jsx","App.js","serviceWorker.js","index.js"],"names":["Table","_id","status","response","colors","Method","attrs","paths","objAttr","attributes","map","attr","key","id","className","_obj","text","path","method","route","objAttrs","el","output","HttpTable","data","info","snkrsAttrs","methodAttr","Developer","useState","tableData","devData","Navbar","props","to","Landing","class","App","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.32bd02d9.chunk.js","sourcesContent":["const Table = [\n    {\n      _id: \"5b21ca3eeb7f6fbccd471815\",\n      status: \"200 - Ok\",\n      response: 'Everything worked as expected'\n    },\n    {\n      _id: \"5b21ca3eeb7f6fbccd471816\",\n      status: \"400 - Bad Request\",\n      response: \"The request was unacceptable, often due to missing a required parameter.\"\n    },\n    {\n      _id: \"5b21ca3eeb7f6fbccd471817\",\n      status: \"401 - Unauthorized\",\n      response: \" No valid API Key provided\"\n    },\n    {\n      _id: \"5b21ca3eeb7f6fbccd471819\",\n      status: \"402 - Request Failed\",\n      response: \"The parameters were valid but the request failed.\"\n    },\n    {\n      _id: \"5b21ca3eeb7f6fbccd47181a\",\n      status: \"403 - Forbidden\",\n      response: \"The API key doesn't have permissions to perform the request.\"\n    },\n    {\n      _id: \"5b21ca3eeb7f6fbccd47181b\",\n      status: \"404 - Not Found\",\n      response: \"The request resource doesn't exist.\"\n    },\n    {\n      _id: \"5b21ca3eeb7f6fbccd47181e\",\n      status: \"500,502,503,504 - Server Errors\",\n      response: \"Something went wrong on Snkrly's end. (This should be rare).\"\n    }\n  ];\n  \n  export function getTable() {\n    return Table;\n  }","import React, {Fragment} from 'react'\nimport PropTypes from 'prop-types'\n\n\nconst colors = [\"purple\", \"blue\", \"green\"]\n\n\n\n\nconst Method = ({attrs, paths, objAttr}) => {\n\n\n     const attributes = attrs.map(attr => (\n         <div key={attr.id}className=\"my-4\">\n             {attr.attr !== \"id\" && (\n            <div className=\"mb-4 border-t w-full\"></div>\n             )}\n            <h4 className=\"font-bold\"> {attr.attr} <span className=\"text-xs font-medium text-red-600\">{attr._obj}</span></h4>\n            <p>{attr.text}</p>\n        </div>\n     ))\n\n     const path = paths.map( path => (\n\n         <tr className=\"text-sm \" key={path.id}>\n            <th className={`px-4 pb-2 align-top text-right text-${colors[path.id]}-600`}\n            \n            \n            >{path.method}</th>\n            <td className=\"px-6 pb-2 tracking-widest\">{path.route}</td>\n        </tr>\n     ))\n\n     const objAttrs = objAttr.map(el => (\n         <Fragment>\n             <h3 key={el.id} className=\"pl-8\"> {el.output}</h3>\n         </Fragment>\n    ))\n\n    return (\n        <Fragment> \n            <section className=\"flex flex-col md:flex-row\">\n                <div className=\"md:w-1/2\">\n                    <h1 className=\"text-2xl pb-1\"> Sneakers</h1>\n                    \n                    <p className=\"text-base\">This is an object representing the snkrs curated collection. You add and update items in the collection if there is something is misrepresented or not avaliable in the collection but should be</p>\n                </div>\n            \n                <div className=\"bg-gray-700 text-gray-200 rounded-lg mt-4 min-h-6 text-sm md:w-1/2 md:ml-6\">\n                    <div className=\"bg-gray-800 rounded-t-lg p-2 pl-4 \"> \n                        <h1 className=\"\"> Endpoints</h1>\n                    </div>\n\n                    <table>\n                        <tbody>\n                        {path}\n                        </tbody>\n                    </table>\n                \n                </div>\n            </section>\n\n            <div className=\"mt-10 border-t w-full md:w-1/2\"></div>\n\n\n            <section className=\"flex flex-col md:flex-row\">\n\n                <div className=\"mt-6 md:w-1/2 \">\n                    <h1 className=\"font-mono\">THE SNKR OBJECT</h1>\n\n                    <h5 className=\"mt-8\"> ATTRIBUTES</h5>\n                    <div className=\"mt-2 border-t w-full\"></div>\n                    <div>\n                        {attributes}\n                    </div>\n\n                </div>\n\n\n                <div className=\"bg-gray-700 text-gray-200 rounded-lg mt-10 min-h-6 text-sm md:w-1/2 md:ml-6 md:h-64\">\n                    <div className=\"bg-gray-800 rounded-t-lg p-2 pl-4 \"> \n                        <h1 className=\"\"> THE SNKR OBJECT</h1>\n                    </div>\n\n                    <div className=\"leading-relaxed text-sm\">\n                        <span className=\"pl-4\">&#123;</span>\n                        {objAttrs}\n                        <span className=\"pl-4\">&#125;</span>\n                    </div>\n\n                </div>\n            </section>\n\n\n        </Fragment>\n       \n        \n    )\n}\n\nMethod.propTypes = {\n    data: PropTypes.array.isRequired,\n    paths: PropTypes.array.isRequired,\n    objAttr: PropTypes.array.isRequired\n}\n\nexport default Method\n\n","import React, {Fragment} from 'react'\nimport PropTypes from 'prop-types'\n\nconst HttpTable = ({data}) => {\n\n    const output = data.map( info => (\n        <tr className=\"text-sm\" key={info._id}>\n            <th className=\"px-4 pb-4 align-top text-right \">{info.status}</th>\n            <td className=\"px-6 pb-4\">{info.response}</td>\n        </tr>\n    ))\n    \n    return (\n        <Fragment>\n            <div className=\" bg-gray-700 text-gray-200 rounded-lg mt-4 min-h-6 text-sm\"> \n                <div className=\"bg-gray-800 rounded-t-lg p-2 pl-4\">\n                    <h1 className=\"pl-4\"> HTTP Summary Code Summary</h1>\n                </div>\n            \n                    <table className=\"\" >\n                        <tbody >\n                            {output}\n                        </tbody>\n                    </table>\n                    \n               \n            </div>\n        </Fragment>\n\n    )\n}\n\nHttpTable.propTypes = {\n\n}\n\nexport default HttpTable\n","const snkrsAttrs = [\n    {\n        _id: 0,\n        attr: \"id\",\n        _obj: \"string\",\n        text: \"Unique identifier for the object.\"\n    },\n    {\n        _id: 1,\n        attr: \"colorWay\",\n        _obj: \"Array\",\n        text: \"An Array of colors that are associated with the sneaker design.\"\n    },\n    {\n        _id: 2,\n        attr: \"name\",\n        _obj: \"string\",\n        text: \"The name of the sneaker\"\n    },\n    {\n        _id: 3,\n        attr: \"releaseDate\",\n        _obj: \"timeStamp\",\n        text: \"The date the sneaker was release\"\n    },\n    {\n        _id:5,\n        attr: \"retro\",\n        _obj: \"boolean\",\n        text: \"Has the value true if this sneaker and colorway was previously released.\"\n    },\n    {\n        _id: 4,\n        attr: \"tech\",\n        _obj: \"string\",\n        text: \"The technology used to make the cushion for the sneaker\"\n    }\n]\n\nconst methodAttr = [\n    {\n        id:0,\n        method: 'GET',\n        route: \"/api/snkrs\"\n    },\n    {\n        id:1,\n        method: 'POST',\n        route: \"/api/snkrs\"\n    },\n    {\n        id:2,\n        method: 'PUT',\n        route: \"/api/snkrs/:id\"\n    },\n]\n\nconst objAttr = [\n    {\n        id: 1,\n        output: `\"id\": \"5d6a1039d17fdf416cxx0f71\",`\n    },\n    {\n        id: 2,\n        output: `\"colorWay\": [\"Sail\", \"Obsidian-University Blue\"],`\n    },\n    {\n        id: 3,\n        output: `\"name\": \"Air Jordan 1 Retro High OG 'Obsidian'\",`\n    },\n    {\n        id: 4,\n        output: `\"releaseDate\": 2019-09-01,`\n    },\n    {\n        id: 6,\n        output: `\"retro\": false`\n    },\n    {\n        id: 5,\n        output: `\"tech\": \"Air\"`\n    },\n]\n\n\n    \n        \n    \n\nexport function attrs(){\n    return snkrsAttrs\n}\n\nexport function getMethod(){\n    return methodAttr\n}\n\nexport function getObj(){\n    return objAttr\n}","import React, {useState} from 'react'\nimport {getTable} from '../data/table'\nimport Method from './Method'\nimport Table from './HttpTable'\nimport { attrs, getMethod, getObj } from '../data/methods';\n\nconst Developer = () => {\n    const [tableData] = useState(getTable())\n    const [devData] = useState({\n        attr: attrs(),\n        path: getMethod(),\n        objAttr: getObj()\n    })\n\n\n    return (\n       <div className=\"mx-6 bg-white text-gray-800 \">\n        <section className=\"flex flex-col py-5 md:flex-row\">\n             <div className=\"md:w-1/2\">\n                <h1 className=\"text-2xl pb-1\"> Snkrly Developer API</h1>\n                <p className=\"pt-4 text-base\">The Snkrly API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.</p>\n                <p className=\"pt-4 text-base\">\n                You can use the Snkrly API in test mode, which does not affect the live data. The API key you use to authenticate the request determines whether the request is live mode or test mode.\n                </p>\n            \n             </div>\n        \n\n            <div className=\"bg-gray-700 text-gray-200 rounded-lg mt-4 min-h-6 text-sm md:w-1/2 md:h-20 md:max-w-xs md:mt-12 md:ml-2\">\n                <div className=\"bg-gray-800 rounded-t-lg p-2 pl-4 \"> \n                    <h1 className=\"\"> Base URL</h1>\n                </div>\n                <div>\n                    <h1 className=\" p-2 pl-4\">https://api.com</h1>\n                </div>\n            </div>\n        </section>\n\n        <section className=\"flex flex-col py-5 border-t mt-6 md:flex-row\">\n            <div className=\"md:w-1/2\">\n                <h1 className=\"text-2xl pt-6\"> Errors</h1>\n                <p className=\"pt-4 text-base\">\n                Snkrly uses conventional HTTP response codes to indicate the success or failure of an API request. In general: Codes in the 2xx range indicate success. Codes in the 4xx range indicate an error that failed given the information provided (e.g., a required parameter was omitted, a charge failed, etc.). Codes in the 5xx range indicate an error with Snkrly's servers (these are rare).\n                </p>\n                <p className=\"pt-4 text-base\">\n                Some 4xx errors that could be handled programmatically (e.g., a card is declined) include an error code that briefly explains the error reported\n                </p>\n            </div>\n\n            <div className=\"md:w-1/2 md:ml-6\">\n                <Table data={tableData}/>\n\n            </div>\n\n       \n        </section>\n\n        <section className=\" border-t mt-6 py-4\">\n            <Method  attrs={devData.attr} paths={devData.path} objAttr={devData.objAttr}/>\n        </section>\n       </div>\n        \n    )\n}\n\nexport default Developer\n","import React from 'react'\n\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom';\n\nconst Navbar = props => {\n    return (\n        <div className=\"bg-white text-gray-800 \">\n            <ul className=\"flex justify-end text-lg\">\n                <li className=\"p-4\" >\n                    <Link to=\"/\"> Home</Link>\n                </li>\n                <li className=\"p-4\">\n                    <Link to=\"/developer\"> Docs</Link>\n                </li>\n            </ul>\n        </div>\n    )\n}\n\nNavbar.propTypes = {\n\n}\n\nexport default Navbar\n","import React from 'react'\nimport {Link} from 'react-router-dom'\n// import './Landing.css'\n// import logo from '../images/j1.svg'\nimport PropTypes from 'prop-types'\n\nconst Landing = props => {\n    return (\n        <div className=\"px-6 bg-white text-gray-800 h-screen md:px-48\" >\n            <h1 className=\"text-center text-xl pt-8\"> The Open Source Sneaker API</h1>\n            <p className=\"text-lg mt-4 pt-4\"> We're building an ecosystem for sneakerheads, sneaker enthusiast and casual sneaker wearers to find a sorts of sneakers.</p>\n            <p className=\"text-lg my-2 py-2\"> It is easy to contribute.</p>\n\n            <div className=\"flex flex-row inline justify-between md:justify-around\">\n                <Link class=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 ml-10 border border-gray-400 rounded shadow\" to=\"/developer\">\n                View Docs\n                </Link>\n                <Link class=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 mr-10 border border-gray-400 rounded shadow\" to=\"/\">\n                View Product\n                </Link>\n            </div>\n\n        </div>\n    )\n}\n\nLanding.propTypes = {\n\n}\n\nexport default Landing\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport Developer from './components/Developer';\nimport Navbar from './components/Navbar';\nimport Landing from './components/Landing';\n\n\nfunction App() {\n  return (\n    <Router> \n      <div className=\"text-base bg-transparent font-mono\" >\n        <Navbar />\n\n        <Switch>\n          <Route exact path=\"/\" component={Landing} />\n\n          <Route exact path=\"/developer\" component={Developer} />\n\n        </Switch>\n      </div>\n\n    </Router>\n \n\n  );\n}\n\nexport default App;\n\n\n\n// Build two parts\n//1 How to use the API Interface\n//2 Retreiving the data from the apis\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./styles/tailwind.css\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}